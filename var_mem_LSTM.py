#!/usr/bin/python


# coding: utf-8

#

# LSTM for learning Markov chains (|q|=4, r variable).
# The LSTM is trained presenting a random chain-like text.
# Then a sequence is generated by feeding the sampled letter as new input.
# =============
# arg required in input:  #hidden_units 'output_gate=yes'/'output_gate=no' dropout_param   r   n_train_steps
#


#  For best practices on how to use Dropout in LSTMs, refer to this [article](http://arxiv.org/abs/1409.2329)
#  here they essentially suggest avoiding dropout on recurrent info, but use that only between layers





# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import os
import datetime
import numpy as np
import random
import string
import tensorflow as tf
from six.moves import range
import datetime
import sys

argv = sys.argv
assert len(sys.argv) == 6
assert argv[2] in ['output_gate=yes','output_gate=no']

Lgt = 400000#400000

############## Markov states ############



state_dict = ['a','c','e','h']        ##   <<<<<<<<---------------
n_states = len(state_dict)
r = int(argv[4]) #memory
n_train_steps = int(argv[5])



############   character <-> number  functions  and sequence statistics

vocabulary_size = n_states

def char2id(char):
	if len(char) == 1:
		return state_dict.index(char)
	if len(char) == 2:
		return state_dict.index(char[0])*n_states+state_dict.index(char[1])
	else:
		idn = 0
		for i in range(len(char)):
			idn += state_dict.index(char[len(char)-i-1])*(n_states**i)
		return idn

def id2char(num_id):  # inversa di char2id
	return state_dict[num_id]

def matrix_element2char(i):  # inversa di char2id
	s = ''
	for j in range(r):
		k = r-j-1
		divs = n_states**k
		s += state_dict[i/divs]
		i = i%divs
	return s



def estrai_matrice(markov_text):
	M_2_to_1 = np.zeros((n_states**r, n_states))
	for i in range(len(markov_text)-r):
		s = markov_text[i:(i+r)]
		M_2_to_1[char2id(s),char2id(markov_text[i+r])]+=1.


	freq_dict = {}
	zeri_list = []
	for i in range(len(M_2_to_1)):
		freq_dict[matrix_element2char(i)] =  np.sum(M_2_to_1[i,:])/np.sum(M_2_to_1)
		#sys.stderr.write('frequency  ' + matrix_element2char(i)+ '  ->  ' + str(freq_dict[matrix_element2char(i)]) +'\n')
		if freq_dict[matrix_element2char(i)] == 0:   #pulisce eventuali righe di zeri
			zeri_list.append(matrix_element2char(i))
			for j in range(len(M_2_to_1[0])):
				M_2_to_1[i,j] = 1.


	M_2_to_1 = M_2_to_1/np.sum(M_2_to_1, axis = 1)[:,None]

	#for i in range(len(M_2_to_1)):
		#for j in range(len(M_2_to_1[0])):
			#sys.stderr.write('prob  ' + matrix_element2char(i) + '  ->  ' + id2char(j) + ' :  ' + '%.2f'  % M_2_to_1[i,j]+'\n')
	#print(M_2_to_1)

	Markov_dict = {}
	for i in range(len(M_2_to_1)):
		Markov_dict[matrix_element2char(i)] =  M_2_to_1[i,:]
	#print(Markov_dict)
	return M_2_to_1, Markov_dict, freq_dict, zeri_list




########   upload the training/validation sequence


with open('package/markov_data/markov_text_mem='+str(r)+'.txt', 'r') as myfile:
    text=myfile.read()
print(len(text))

chain_stats = np.load('package/markov_data/chain_stats_mem='+str(r)+'.npz')
M_2_to_1 = chain_stats['a']
zeri_list = map(matrix_element2char, chain_stats['b'].tolist())


valid_size = 2000  #qual e' il tempo in cui Markov chain non dipende piu' da stato iniziale
valid_text = text[:valid_size]
train_text = text[valid_size:]
train_size = len(train_text)


# Function to generate a training batch for the LSTM model.


#a batch e' una lista di batch_size stringhe di lunghezza num_unrollings+1
#ciascuna stringa e' un estratto (consecutivo) di text8
#cursor e' una lista di lunghezza batch_size che contiene dove iniziano le stringhe del prossimo batch
#the first letter of each string in the batch is the last letter of the corresponding string in the previous batch
#warning: BatchGenerator.next() returns the list, num_unrollings+1 long, of batch_size one-hot R^27 np.arrays.
batch_size=64
num_unrollings=10

class BatchGenerator(object): # "new-style" classes... to formally identify class and type
	def __init__(self, text, batch_size, num_unrollings):
		self._text = text
		self._text_size = len(text)
		self._batch_size = batch_size
		self._num_unrollings = num_unrollings
		segment = self._text_size // batch_size
		self._cursor = [ offset * segment for offset in range(batch_size)]
		self._last_batch = self._next_batch()

	def _next_batch(self):
		"""Generate a single batch from the current cursor position in the data."""
		batch = np.zeros(shape=(self._batch_size, vocabulary_size), dtype=np.float)
		for b in range(self._batch_size):
			batch[b, char2id(self._text[self._cursor[b]])] = 1.0
			self._cursor[b] = (self._cursor[b] + 1) % self._text_size
		return batch

	def next(self):
		"""Generate the next array of batches from the data. The array consists of
		the last batch of the previous array, followed by num_unrollings new ones.
		"""
		batches = [self._last_batch]
		for step in range(self._num_unrollings):
			batches.append(self._next_batch())
		self._last_batch = batches[-1]
		return batches

def characters(probabilities):
	"""Turn a 1-hot encoding or a probability distribution over the possible
	characters back into its (most likely) character representation."""
	return [id2char(c) for c in np.argmax(probabilities, 1)]

def batches2string(batches):
	"""Convert a sequence of batches back into their (most likely) string
	representation."""
	s = [''] * batches[0].shape[0]
	for b in batches:
		s = [''.join(x) for x in zip(s, characters(b))]
	return s

train_batches = BatchGenerator(train_text, batch_size, num_unrollings)
valid_batches = BatchGenerator(valid_text, 1, 1)


# In[18]:

def logprob(predictions, labels):
	"""Log-probability of the true labels in a predicted batch."""
	predictions[predictions < 1e-10] = 1e-10
	return np.sum(np.multiply(labels, -np.log(predictions))) / labels.shape[0]

def sample_distribution(distribution):
	"""Sample one element from a distribution assumed to be an array of normalized
	probabilities.
	"""
	r = random.uniform(0, 1)
	s = 0
	for i in range(len(distribution)):
		s += distribution[i]
		if s >= r:
			return i
	return len(distribution) - 1

def sample(prediction):
	"""Turn a (column) prediction into 1-hot encoded samples."""
	p = np.zeros(shape=[1, vocabulary_size], dtype=np.float)
	p[0, sample_distribution(prediction[0])] = 1.0
	return p

def random_distribution():
	"""Generate a random column of probabilities."""
	b = np.random.uniform(0.0, 1.0, size=[1, vocabulary_size])
	return b/np.sum(b, 1)[:,None]


# Simple LSTM Model.

# In[19]:

num_nodes = int(sys.argv[1])

graph = tf.Graph()
with graph.as_default():

	keep_prob = tf.placeholder(tf.float32)
# Parameters:
# Input gate: input, previous output, and bias.
	ix = tf.Variable(tf.truncated_normal([vocabulary_size, num_nodes], -0.1, 0.1))
	im = tf.Variable(tf.truncated_normal([num_nodes, num_nodes], -0.1, 0.1))
	ib = tf.Variable(tf.zeros([1, num_nodes]))
# Forget gate: input, previous output, and bias.
	fx = tf.Variable(tf.truncated_normal([vocabulary_size, num_nodes], -0.1, 0.1))
	fm = tf.Variable(tf.truncated_normal([num_nodes, num_nodes], -0.1, 0.1))
	fb = tf.Variable(tf.zeros([1, num_nodes]))
# Memory cell: input, state and bias.
	cx = tf.Variable(tf.truncated_normal([vocabulary_size, num_nodes], -0.1, 0.1))
	cm = tf.Variable(tf.truncated_normal([num_nodes, num_nodes], -0.1, 0.1))
	cb = tf.Variable(tf.zeros([1, num_nodes]))
# Output gate: input, previous output, and bias.

	if argv[2]=='output_gate=yes':
		ox = tf.Variable(tf.truncated_normal([vocabulary_size, num_nodes], -0.1, 0.1))
		om = tf.Variable(tf.truncated_normal([num_nodes, num_nodes], -0.1, 0.1))
		ob = tf.Variable(tf.zeros([1, num_nodes]))
# Variables saving state across unrollings.
	saved_output = tf.Variable(tf.zeros([batch_size, num_nodes]), trainable=False)
	saved_state = tf.Variable(tf.zeros([batch_size, num_nodes]), trainable=False)
# Classifier weights and biases.
	w = tf.Variable(tf.truncated_normal([num_nodes, vocabulary_size], -0.1, 0.1))
	b = tf.Variable(tf.zeros([vocabulary_size]))


	saver = tf.train.Saver()

# Definition of the cell computation.
	def lstm_cell(i, o, state):
		"""Create a LSTM cell. See e.g.: http://arxiv.org/pdf/1402.1128v1.pdf
		Note that in this formulation, we omit the various connections between the
		previous state and the gates."""
		input_gate = tf.sigmoid(tf.matmul(i, ix) + tf.matmul(o, im) + ib)
		forget_gate = tf.sigmoid(tf.matmul(i, fx) + tf.matmul(o, fm) + fb)
		update = tf.matmul(i, cx) + tf.matmul(o, cm) + cb
		state = forget_gate * state + input_gate * tf.tanh(update)
		if argv[2]=='output_gate=yes':
			output_gate = tf.sigmoid(tf.matmul(i, ox) + tf.matmul(o, om) + ob)
			return output_gate * tf.tanh(state), state
		else:
			return tf.tanh(state), state

# Input data.
	train_data = list()
	for _ in range(num_unrollings + 1):
		train_data.append(tf.placeholder(tf.float32, shape=[batch_size,vocabulary_size]))
	train_inputs = train_data[:num_unrollings] #delle 11 lettere le prime 10 servono per predire l' ultima
	train_labels = train_data[1:]  # labels are inputs shifted by one time step.

# Unrolled LSTM loop. Logits chiama outputs e questo loop viene eseguito! (giusto??)
	outputs = list()
	output = saved_output
	state = saved_state
	for i in train_inputs:
		output, state = lstm_cell(i, output, state)
		outputs.append(output)

# State saving across unrollings. in this way the recurrent state flows continuously in time, even
	#if the weight update occurs any num_unrollings time steps. hink it is strictly necessary only after validation stuff
	with tf.control_dependencies([saved_output.assign(output), saved_state.assign(state)]):
				# state credo che sia num_node x batch_size... viene tramandato a nuovo batch
	# Classifier.
		logits = tf.nn.xw_plus_b(tf.nn.dropout(tf.concat(0, outputs), keep_prob), w, b)  # applica softmax a tutti i 10 output e li confronta con i labels
		loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf.concat(0, train_labels)))

# Optimizer. Clippa il gradiente e tuna il learning rate
	global_step = tf.Variable(0)
	learning_rate = tf.train.exponential_decay(10.0, global_step, 5000, 0.1, staircase=True)
	optimizer = tf.train.GradientDescentOptimizer(learning_rate)
	gradients, v = zip(*optimizer.compute_gradients(loss))
	gradients, _ = tf.clip_by_global_norm(gradients, 1.25)
	optimizer = optimizer.apply_gradients(zip(gradients, v), global_step=global_step)

# Predictions.
	train_prediction = tf.nn.softmax(logits)

# Sampling and validation eval: batch 1, no unrolling.
	sample_input = tf.placeholder(tf.float32, shape=[1, vocabulary_size])
	saved_sample_output = tf.Variable(tf.zeros([1, num_nodes]))
	saved_sample_state = tf.Variable(tf.zeros([1, num_nodes]))
	reset_sample_state = tf.group(saved_sample_output.assign(tf.zeros([1, num_nodes])),saved_sample_state.assign(tf.zeros([1, num_nodes])))
	sample_output, sample_state = lstm_cell(
		sample_input, saved_sample_output, saved_sample_state)
	with tf.control_dependencies([saved_sample_output.assign(sample_output),saved_sample_state.assign(sample_state)]):
		sample_prediction = tf.nn.softmax(tf.nn.xw_plus_b(sample_output, w, b))


# In[20]:


###########   TRAINING   ##################

num_steps = n_train_steps
summary_frequency = 400

with tf.Session(graph=graph) as session:
	tf.initialize_all_variables().run()
	sys.stderr.write('Initialized'+'\n')
	mean_loss = 0
	for step in range(num_steps):
		batches = train_batches.next()
		feed_dict = dict()
		feed_dict[keep_prob]=float(argv[3])
		for i in range(num_unrollings + 1):
			feed_dict[train_data[i]] = batches[i]
		_, l, predictions, lr = session.run([optimizer, loss, train_prediction, learning_rate], feed_dict=feed_dict)
		mean_loss += l
		if step % summary_frequency == 0:
			if step > 0:
				mean_loss = mean_loss / summary_frequency
	# The mean loss is an estimate of the loss over the last few batches.
			sys.stderr.write('Average loss at step %d: %f learning rate: %f   \n' % (step, mean_loss, lr))
			mean_loss = 0
			labels = np.concatenate(list(batches)[1:])
			sys.stderr.write('Minibatch perplexity: %.2f  \n' % float(np.exp(logprob(predictions, labels))))
			#if step % (summary_frequency * 10) == 0:
		#backup
				#save_path = saver.save(session, "check_point_training.ckpt")
		# Generate some samples.
				#print('=' * 80)
				#for _ in range(5):
					#feed = sample(random_distribution())
					#sentence = characters(feed)[0]
					#reset_sample_state.run()  ####   <<<<<-----------
					#for _ in range(79):
						#prediction = sample_prediction.eval({sample_input: feed})
						#feed = sample(prediction)
						#sentence += characters(feed)[0]
					#print(sentence)
				#print('=' * 80)
	# Measure validation set perplexity.
			reset_sample_state.run()    ######   <<<<<<<<<---------
			valid_logprob = 0
			for _ in range(valid_size):
				b = valid_batches.next()
				predictions = sample_prediction.eval({sample_input: b[0], keep_prob: 1.})
				valid_logprob = valid_logprob + logprob(predictions, b[1])
			sys.stderr.write('Validation set perplexity: %.2f    \n' % float(np.exp(valid_logprob / valid_size)))

	ora = datetime.datetime.now()
	save_path = saver.save(session, 'backup_training/backup_training_'+ str(ora.day)+'_'+str(ora.month)+'_alle_'+str(ora.hour) +'.ckpt')
	#for retrieval see https://www.tensorflow.org/versions/r0.10/how_tos/variables/index.html


# In[22]:

#######  genera testo e testa se LST ha appreso matrice di markov

def genera_testo(L):
	with tf.Session(graph=graph) as session:
		saver.restore(session, save_path)
			# Generate some samples.
		#print('=' * 80)
		for _ in range(1):
			feed = sample(random_distribution())
			sentence = characters(feed)[0]
			reset_sample_state.run()  ####   <<<<<-----------
			for _ in range(L):
				prediction = sample_prediction.eval({sample_input: feed, keep_prob: 1.})  ### the sampled letter is fed as new input
				feed = sample(prediction)
				sentence += characters(feed)[0]
			#print(sentence[:1000])
			#print('=' * 80)
	return sentence

LSTM_text = genera_testo(Lgt)
LSTM_2_to_1, LSTM_dict, LSTM_freq, _ = estrai_matrice(LSTM_text)


# In[26]:
def rate_difference(tr_M_ref, tr_M, zeri_list_ref):
	assert tr_M_ref.shape == tr_M.shape
	matrice = []
	for i in range(len(tr_M_ref)):
		if matrix_element2char(i) not in zeri_list_ref:
			matrice.append(tr_M_ref[i]-tr_M[i])
	matrice = np.array(matrice)
	return np.sqrt((matrice**2).mean())

f_error = 0.
for z in zeri_list:
	f_error += LSTM_freq[z]


orig = sys.stdout
f = open("6_risultati_serial.dat", "a")
sys.stdout = f
print(int(sys.argv[1]), '	', rate_difference(LSTM_2_to_1, M_2_to_1, zeri_list), '	', f_error, '	',len(LSTM_text), '	', num_steps, '	', argv[2],'	',  float(argv[3]))
sys.stdout = orig
f.close()







#
# We want to train a LSTM over bigrams, that is pairs of consecutive characters like 'ab' instead of single characters like 'a'. Since the number of possible bigrams is large, feeding them directly to the LSTM using 1-hot encodings will lead to a very sparse representation that is very wasteful computationally.
#
# a- Introduce an embedding lookup on the inputs, and feed the embeddings to the LSTM cell instead of the inputs themselves.
#
# b- Write a bigram-based LSTM, modeled on the character LSTM above.
#
# c- Introduce Dropout. For best practices on how to use Dropout in LSTMs, refer to this [article](http://arxiv.org/abs/1409.2329).
#
